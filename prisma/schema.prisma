// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @map("refreshToken") @db.Text
    access_token      String? @map("accessToken") @db.Text
    expires_at        Int?    @map("expiresAt")
    token_type        String? @map("tokenType")
    scope             String?
    id_token          String? @map("idToken") @db.Text
    session_state     String? @map("sessionState")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    config Config?

    accounts         Account[]
    sessions         Session[]
    contacts         Contact[]
    groups           Group[]
    interactions     Interaction[]
    interactionTypes InteractionType[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Contact {
    id                  String    @id @default(uuid())
    fullName            String
    firstMet            DateTime?
    notes               String?
    email               String?
    phone               String?
    lastInteraction     DateTime?
    lastInteractionType String?
    avatar              String?   @db.Text

    userId String
    user   User   @relation(fields: [userId], references: [id])

    groups       Group[]       @relation("ContactGroup")
    interactions Interaction[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model Group {
    id          String  @id @default(uuid())
    icon        String
    name        String
    description String?

    userId String
    user   User   @relation(fields: [userId], references: [id])

    contacts Contact[] @relation("ContactGroup")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model Interaction {
    id    String   @id @default(uuid())
    date  DateTime
    notes String?

    typeId    String
    type      InteractionType @relation(fields: [typeId], references: [id])
    contactId String
    contact   Contact         @relation(fields: [contactId], references: [id])
    userId    String
    user      User            @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([contactId])
    @@index([typeId])
}

model InteractionType {
    id   String @id @default(uuid())
    name String

    userId String?
    user   User?   @relation(fields: [userId], references: [id])

    intereactions Interaction[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model Config {
    id             String    @id @default(uuid())
    reminderEmails Boolean   @default(false)
    keepInTouch    Boolean   @default(false)
    timezoneId     Int?
    timezone       Timezone? @relation(fields: [timezoneId], references: [id])

    userId String? @unique
    user   User?   @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([timezoneId])
}

model Timezone {
    id        Int    @id
    name      String
    nameShort String
    offset    Float

    configs Config[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
